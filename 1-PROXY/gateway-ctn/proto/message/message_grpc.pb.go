// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GestionMessageClient is the client API for GestionMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GestionMessageClient interface {
	PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageReply, error)
	GetAllMessages(ctx context.Context, in *GetAllMessagesRequest, opts ...grpc.CallOption) (*GetAllMessagesReply, error)
}

type gestionMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewGestionMessageClient(cc grpc.ClientConnInterface) GestionMessageClient {
	return &gestionMessageClient{cc}
}

func (c *gestionMessageClient) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageReply, error) {
	out := new(PostMessageReply)
	err := c.cc.Invoke(ctx, "/message.gestion_message/PostMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gestionMessageClient) GetAllMessages(ctx context.Context, in *GetAllMessagesRequest, opts ...grpc.CallOption) (*GetAllMessagesReply, error) {
	out := new(GetAllMessagesReply)
	err := c.cc.Invoke(ctx, "/message.gestion_message/GetAllMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GestionMessageServer is the server API for GestionMessage service.
// All implementations must embed UnimplementedGestionMessageServer
// for forward compatibility
type GestionMessageServer interface {
	PostMessage(context.Context, *PostMessageRequest) (*PostMessageReply, error)
	GetAllMessages(context.Context, *GetAllMessagesRequest) (*GetAllMessagesReply, error)
	mustEmbedUnimplementedGestionMessageServer()
}

// UnimplementedGestionMessageServer must be embedded to have forward compatible implementations.
type UnimplementedGestionMessageServer struct {
}

func (UnimplementedGestionMessageServer) PostMessage(context.Context, *PostMessageRequest) (*PostMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMessage not implemented")
}
func (UnimplementedGestionMessageServer) GetAllMessages(context.Context, *GetAllMessagesRequest) (*GetAllMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMessages not implemented")
}
func (UnimplementedGestionMessageServer) mustEmbedUnimplementedGestionMessageServer() {}

// UnsafeGestionMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GestionMessageServer will
// result in compilation errors.
type UnsafeGestionMessageServer interface {
	mustEmbedUnimplementedGestionMessageServer()
}

func RegisterGestionMessageServer(s grpc.ServiceRegistrar, srv GestionMessageServer) {
	s.RegisterService(&GestionMessage_ServiceDesc, srv)
}

func _GestionMessage_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GestionMessageServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.gestion_message/PostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GestionMessageServer).PostMessage(ctx, req.(*PostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GestionMessage_GetAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GestionMessageServer).GetAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.gestion_message/GetAllMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GestionMessageServer).GetAllMessages(ctx, req.(*GetAllMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GestionMessage_ServiceDesc is the grpc.ServiceDesc for GestionMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GestionMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.gestion_message",
	HandlerType: (*GestionMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMessage",
			Handler:    _GestionMessage_PostMessage_Handler,
		},
		{
			MethodName: "GetAllMessages",
			Handler:    _GestionMessage_GetAllMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/message.proto",
}
