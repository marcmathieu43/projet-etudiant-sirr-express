// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: websocket/websocket.proto

package websocket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageReceiver_SendMessage_FullMethodName = "/websocket.MessageReceiver/SendMessage"
)

// MessageReceiverClient is the client API for MessageReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageReceiverClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
}

type messageReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageReceiverClient(cc grpc.ClientConnInterface) MessageReceiverClient {
	return &messageReceiverClient{cc}
}

func (c *messageReceiverClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageReply)
	err := c.cc.Invoke(ctx, MessageReceiver_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageReceiverServer is the server API for MessageReceiver service.
// All implementations must embed UnimplementedMessageReceiverServer
// for forward compatibility.
type MessageReceiverServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	mustEmbedUnimplementedMessageReceiverServer()
}

// UnimplementedMessageReceiverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageReceiverServer struct{}

func (UnimplementedMessageReceiverServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageReceiverServer) mustEmbedUnimplementedMessageReceiverServer() {}
func (UnimplementedMessageReceiverServer) testEmbeddedByValue()                         {}

// UnsafeMessageReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageReceiverServer will
// result in compilation errors.
type UnsafeMessageReceiverServer interface {
	mustEmbedUnimplementedMessageReceiverServer()
}

func RegisterMessageReceiverServer(s grpc.ServiceRegistrar, srv MessageReceiverServer) {
	// If the following call pancis, it indicates UnimplementedMessageReceiverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageReceiver_ServiceDesc, srv)
}

func _MessageReceiver_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageReceiverServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageReceiver_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageReceiverServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageReceiver_ServiceDesc is the grpc.ServiceDesc for MessageReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websocket.MessageReceiver",
	HandlerType: (*MessageReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageReceiver_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websocket/websocket.proto",
}
